name: Dry-run Renovate
description: 'Dry-run Renovate and output to summary'

inputs:
  config-file:
    description: 'Renovate config file'
    required: true
  cache:
    description: 'if `true`, cache ~/.npm'
    required: false
    default: "true"
  log-level:
    description: 'Renovate log level [trace|debug|info|warn|error|fatal]'
    required: false
    default: "debug"
  log-format:
    description: 'Renovate log format [text|json]'
    required: false
    default: "text"
  save-log:
    description: 'if `true`, save log file'
    required: false
    default: "false"
  detail-summary:
    description: 'if `true`, enclose the output log to the summary in a detail tag.'
    required: false
    default: "true"
  token:
    description: 'GitHub token'
    required: false
    default: ${{ github.token }}
  renovate-username:
    description: 'Renovate username'
    required: false
    default: "GitHub Action"
  renovate-git-author:
    description: 'Renovate git author'
    required: false
    default: "GitHub Action <action@github.com>"
  install-nodejs:
    description: 'if `true`, install Renovate required Node.js'
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Setup
      id: setup
      shell: bash
      run: |
        # Get the major version number of Renovate to use for the cache key.
        echo "renovate-version=$(npm show renovate version --no-update-notifier | cut -d . -f 1)" >> $GITHUB_OUTPUT
        
        # Create a path to save the Renovate log.
        echo "renovate-log=${{ runner.temp }}/renovate-dry-run.log" >> $GITHUB_OUTPUT
        
        # Create a path to save a action summary.
        echo "summary=${{ runner.temp }}/summary.md" >> $GITHUB_OUTPUT

        # Output Renovate required node version
        echo "renovate-required-node-version=$(npm view renovate --json | jq '.engines.node')" >> $GITHUB_OUTPUT

    # - name: Install semver
    #   if: inputs.install-nodejs == 'true'
    #   shell: bash
    #   run: npm install -g semver

    # - name: Get Renovate required minimum node version
    #   if: inputs.install-nodejs == 'true'
    #   uses: actions/github-script@v7
    #   id: renovate-required-minimum-node-version
    #   env:
    #     RENOVATE_REQUIRED_NODE_VERSION: ${{ steps.setup.outputs.renovate-required-node-version }}
    #   with:
    #     result-encoding: string
    #     script: |
    #       const semver = require('semver');
    #       // get the minimum version of Node.js required by Renovate
    #       // e.g. "semver.minVersion("^20.15.1").version" -> "20.15.1"
    #       const minVersion = semver.minVersion(process.env.RENOVATE_REQUIRED_NODE_VERSION);
    #       console.log(JSON.stringify(minVersion));
    #       return minVersion.version;

    - name: Setup Node.js
      if: inputs.install-nodejs == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.setup.outputs.renovate-required-node-version }}

    - uses: actions/cache@v4
      if: inputs.cache == 'true'
      with:
        path: ~/.npm
        # Cache Renovate and its dependencies,
        #   using the major version of Renovate as the cache key because Renovate is updated frequently.
        key: npm-renovate-major-v${{ steps.setup.outputs.renovate-version }}

    - name: Dry-run Renovate
      env:
        # By setting `RENOVATE_USERNAME` and `RENOVATE_GIT_AUTHOR`,
        #   `GITHUB_TOKEN` can be used for the secret requested by Renovate.
        #   ref: https://zenn.dev/azrsh/articles/renovate-dry-run-ci#%E5%AE%9F%E8%A3%85-2
        # Use the `GitHub Action' user to make it explicit that the execution is through GitHub Actions.
        #   ref: https://github.com/actions/checkout/issues/13
        RENOVATE_USERNAME: ${{ inputs.renovate-username }}
        RENOVATE_GIT_AUTHOR: ${{ inputs.renovate-git-author }}
        RENOVATE_TOKEN: ${{ inputs.token }}

        # Set the log level for Renovate.
        #   ref: https://docs.renovatebot.com/examples/self-hosting/#about-the-log-level-numbers
        # Renovate supports specifying log levels in environment variables.
        #   ref: https://github.com/renovatebot/renovate/issues/8291
        LOG_LEVEL: ${{ inputs.log-level }}

        # Renovate outputs human readable logs by default;
        #   by specifying LOG_FORMAT=json, it outputs logs in json format.
        #   ref: https://docs.renovatebot.com/examples/self-hosting/#logging
        # Renovate supports specifying the log format in environment variables.
        #   ref: https://github.com/renovatebot/renovate/blob/3b72d500983036ec76d33e70a1a177f800321d78/lib/logger/index.ts#L31
        LOG_FORMAT: ${{ inputs.log-format }}

        # Specify the config file for Renovate.
        #   ref: https://github.com/renovatebot/renovate/blob/3b72d500983036ec76d33e70a1a177f800321d78/docs/development/configuration.md?plain=1#LL20-L21
        RENOVATE_CONFIG_FILE: ${{ inputs.config-file }}

      shell: bash

      # Description of options
      # - `--schedule`               : Set to empty to ignore schedule settings.
      # - `--require-config=ignored` : Set to ignore the default branch config of the remote repository.
      #                                Without it, the default branch config of the remote repository is used.
      # - `--dry-run`                : Enable dry-run to avoid creating PRs, auto-merging, and updating the Dependency Dashboard.
      run: |
        npx renovate \
          --schedule= \
          --require-config=ignored \
          --dry-run ${{ github.repository }} \
          | tee ${{ steps.setup.outputs.renovate-log }}

    # Create a step summary for multiple steps,
    #   because the insertion of the `details` tag is controlled by `input`.
    # Use `always()` to output a log even if Renovate fails.
    # Write the summary to a temporary file first, without outputting directly to `$GITHUB_STEP_SUMMARY`,
    #   because the `details` tag will not work if the steps are separated.
    #   see: https://github.com/community/community/discussions/44185
    - name: Create step summary [title]
      if: always()
      shell: bash
      run: |
        echo "# Renovate dry run log" > ${{ steps.setup.outputs.summary }}

    - name: Create step summary [details start tag]
      if: always() && inputs.detail-summary == 'true'
      shell: bash
      run: |
        echo "<details>" >> ${{ steps.setup.outputs.summary }}
        echo "<summary>detail</summary>" >> ${{ steps.setup.outputs.summary }}

    - name: Create step summary [body]
      if: always()
      shell: bash
      run: |
        # The top and bottom of the codeblock must be blank lines, so use line breaks to sandwich the codeblock.
        echo "" >> ${{ steps.setup.outputs.summary }}
        echo '```json' >> ${{ steps.setup.outputs.summary }}
        cat ${{ steps.setup.outputs.renovate-log }} >> ${{ steps.setup.outputs.summary }}
        echo '```' >> ${{ steps.setup.outputs.summary }}
        echo "" >> ${{ steps.setup.outputs.summary }}

    - name: Create step summary [details end tag]
      if: always() && inputs.detail-summary == 'true'
      shell: bash
      run: |
        echo "</details>" >> ${{ steps.setup.outputs.summary }}

    - name: Output to step summary
      if: always()
      shell: bash
      run: |
        cat ${{ steps.setup.outputs.summary }} >> $GITHUB_STEP_SUMMARY

    # Save the Renovate log to an artifact.
    # Use `always()` to save a log even if Renovate fails.
    - name: Save log
      if: always() && inputs.save-log == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: renovate-dry-run-log
        path: |
          ${{ steps.setup.outputs.renovate-log }}
